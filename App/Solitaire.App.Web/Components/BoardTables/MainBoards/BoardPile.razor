@using Solitaire.Games.Core.Models.Piles;
@inject ICardValidationService _service;

<div class="board-pile">
    <Dropzone Items="Pile.Cards" TItem="Card" Accepts="(first, second) => DragCardsAccepted(first, second)" AllowsDrag="(card) => card.IsFlipped">
        @if(Pile.IsLastCard(context))
        {
            <CardItem Card=@context IsFlipped=true IndexZ=@Pile.Cards.IndexOf(context) OnClick=@(() => GameManager.ClickCard(context))></CardItem>
        } else
        {
            <CardItem Card=@context IsFlipped=@context.IsFlipped IndexZ=@Pile.Cards.IndexOf(context)></CardItem>
        }
    </Dropzone>
</div>

@code {
    [CascadingParameter]
    public GameManager GameManager { get; set; }
    [Parameter]
    public Pile Pile { get; set; }

    private bool DragCardsAccepted(Card first, Card second)
    {
        if (Pile.IsEmpty() && second == null && _service.IsKing(first))
            return true;

        if (_service.AreOpossiteColors(first, second) && 
            _service.AreConsecutiveValuesDescending(first, second))
            return true;

        return false;
    }
}
