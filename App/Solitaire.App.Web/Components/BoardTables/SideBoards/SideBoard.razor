

<div class="side-board">
    <div class="pile">
        <DrawPile Pile="@GameManager.Game.Board.DrawPile" OnClick="@Action"></DrawPile>
    </div>

    <div class="pile">
        <WastePile Pile="@GameManager.Game.Board.WastePile"></WastePile>
    </div>

    <div class="pile"></div>
    @foreach(var pile in GameManager.Game.Board.SuitPiles)
    {
        <div class="pile">
            <SymbolCover Symbol=@GetSymbol(pile.Key)></SymbolCover>
            <SuitPile Suit=@pile.Key Pile=@pile.Value></SuitPile>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    public GameManager GameManager { get; set; }


    private void Action()
    {
        if (GameManager.Game.Board.DrawPile.IsEmpty())
            GameManager.ResetDeck();
        else
            GameManager.DrawCard();
    }

    protected string GetSymbol(CardSuit cardSuit)
    {
        switch (cardSuit)
        {
            case CardSuit.hearts:
                return "♥";
            case CardSuit.diamonds:
                return "♦";
            case CardSuit.clubs:
                return "♣";
            case CardSuit.spades:
                return "♠";
            default:
                throw new ArgumentException($"Invalid card suit: {cardSuit}", nameof(cardSuit));
        }
    }
}
