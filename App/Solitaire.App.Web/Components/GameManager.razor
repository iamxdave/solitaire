@using Solitaire.Games.Core.Handlers;
@inject ICardValidationService _service;

<div class="game-manager">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>



@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public Game Game { get; private set; }
    public LastMove LastMove;

    public void SetLastMove(Card card)
    {
        var boardPiles = Game.Board.BoardPiles;
        var wastePile = Game.Board.WastePile;

        var pile = (boardPiles + wastePile).FirstOrDefault(pile => pile.Contains(card));

        if(pile == null)
        {
            LastMove = new LastMove();
        }else
        {
            LastMove = new LastMove()
            {
                Pile = pile,
                Index = pile.Cards.IndexOf(card),
            };
        }
    }

    protected override void OnInitialized()
    {
        Game = GameFactory.Create();
    }

    public void DrawCard()
    {
        DrawCardHandler.Handle(Game);
        StateHasChanged();
    }

    public void ResetDeck()
    {
        ResetDeckHandler.Handle(Game);
        StateHasChanged();
    }

    public void ClickCard(Card card)
    {
        ClickCardHandler.Handle(Game, card, _service);
        StateHasChanged();
    }

    public void MoveCards(Pile pile)
    {
        MoveCardsHandler.Handle(LastMove.Index, LastMove.Pile, pile);
        StateHasChanged();
    }
}
