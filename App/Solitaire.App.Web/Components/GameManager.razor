@inject IGameHandlingService _handlingService;

<div class="game-manager">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>



@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public Game Game { get; private set; }
    public LastMove LastMove;

    public void SetLastMove(Card card)
    {
        var boardPiles = Game.Board.BoardPiles;
        var suitPiles = Game.Board.SuitPiles;
        var wastePile = Game.Board.WastePile;

        var piles = new List<Pile>(boardPiles + wastePile);
        
        piles.AddRange(suitPiles.Values);

        var pile = (piles).First(pile => pile.Contains(card));

        LastMove = new LastMove()
        {
            Pile = pile,
            Index = pile.Cards.IndexOf(card),
        };
    }

    protected override void OnInitialized()
    {
        Game = GameFactory.Create();
    }

    public void DrawCard()
    {
        _handlingService.DrawCard(Game);
        StateHasChanged();
    }

    public void ResetDeck()
    {
        _handlingService.ResetDeck(Game);
        StateHasChanged();
    }

    public void ClickCard(Card card)
    {
        _handlingService.ClickCard(Game, card);
        StateHasChanged();
    }

    public void MoveCards(Pile pile)
    {
        _handlingService.MoveCards(LastMove.Index, LastMove.Pile, pile);
        StateHasChanged();
    }
}
